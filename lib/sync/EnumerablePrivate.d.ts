import { IEqualityComparer, ITuple } from "../shared/shared";
import { IAsyncEnumerable } from "./../async/async";
import { BasicEnumerable } from "./BasicEnumerable";
import { IEnumerable } from "./sync";
export declare function sum_1(source: Iterable<number>): number;
export declare function sum_2<TSource>(source: Iterable<TSource>, selector: (x: TSource) => number): number;
export declare function takeWhile_1<T>(source: Iterable<T>, predicate: (x: T) => boolean): IEnumerable<T>;
export declare function takeWhile_2<T>(source: Iterable<T>, predicate: (x: T, index: number) => boolean): IEnumerable<T>;
export declare function takeWhileAsync_1<T>(source: Iterable<T>, predicate: (x: T) => Promise<boolean>): IAsyncEnumerable<T>;
export declare function takeWhileAsync_2<T>(source: Iterable<T>, predicate: (x: T, index: number) => Promise<boolean>): IAsyncEnumerable<T>;
export declare function union_1<TSource>(first: Iterable<TSource>, second: Iterable<TSource>): BasicEnumerable<TSource>;
export declare function union_2<TSource>(first: Iterable<TSource>, second: Iterable<TSource>, comparer: IEqualityComparer<TSource>): BasicEnumerable<TSource>;
export declare function where_1<T>(source: Iterable<T>, predicate: (x: T) => boolean): IEnumerable<T>;
export declare function where_2<T>(source: Iterable<T>, predicate: (x: T, index: number) => boolean): IEnumerable<T>;
export declare function whereAsync_1<T>(source: Iterable<T>, predicate: (x: T) => Promise<boolean>): IAsyncEnumerable<T>;
export declare function whereAsync_2<T>(source: Iterable<T>, predicate: (x: T, index: number) => Promise<boolean>): IAsyncEnumerable<T>;
export declare function zip_1<T, Y>(source: Iterable<T>, second: Iterable<Y>): IEnumerable<ITuple<T, Y>>;
export declare function zip_2<T, Y, OUT>(source: Iterable<T>, second: Iterable<Y>, resultSelector: (x: T, y: Y) => OUT): IEnumerable<OUT>;
